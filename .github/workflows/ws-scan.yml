name: ws-scan

on:
  push:
    branches: [ main ]

  workflow_dispatch:
    # inputs:
    #   name:
    #     # Friendly description to be shown in the UI instead of 'name'
    #     description: 'Person to greet'
    #     # Default value if no value is explicitly provided
    #     default: 'World'
    #     # Input has to be provided for the workflow to run
    #     required: true

env:
  VERSION: "1.1.5"
  EXECUTABLE: "SerialStudio"
  APPLICATION: "Serial Studio"
  UNIXNAME: "serial-studio"
  QMAKE_PROJECT: "Serial-Studio.pro"
  QML_DIR_NIX: "assets/qml"
  QML_DIR_WIN: "assets\\qml"
  PUBLISHER: "Alex Spataru"
  REPO_DIR: "/home/runner/work/Serial-Studio/Serial-Studio"
  QT_VERSION: 5.15.2
  QMAKE: qmake
  CORES: 12

jobs:
  build:

    runs-on: ubuntu-latest
    name: 'üêß Ubuntu'

    steps:

    - name: 'üß∞ Checkout'
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: '‚öôÔ∏è Cache Qt'
      id: cache-qt
      uses: actions/cache@v1
      with:
        path: ../Qt
        key: ${{runner.os}}-qtcachedir-${{env.QT_VERSION}}

    - name: '‚öôÔ∏è Install Qt'
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{env.QT_VERSION}}
        #modules: qtserialport qt5compat
        aqtversion: '==2.0.0'
        cached: ${{steps.cache-qt.outputs.cache-hit}}

    # Install additional dependencies, stolen from:
    # https://github.com/mapeditor/tiled/blob/master/.github/workflows/packages.yml
    - name: '‚öôÔ∏è Install dependencies'
      run: |
        sudo apt-get update
        sudo apt-get install libgl1-mesa-dev libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0 libzstd-dev
    - name: 'üöß Compile application'
      run: |
          ${{env.QMAKE}} ${{env.QMAKE_PROJECT}} CONFIG+=release PREFIX=/usr
          make -j${{env.CORES}}
    - name: '‚öôÔ∏è Install linuxdeployqt'
      run: |
          wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage" -O linuxdeployqt
          chmod a+x linuxdeployqt
    - name: 'üì¶ Create AppImage'
      run: |
          make INSTALL_ROOT=appdir install
          ./linuxdeployqt appdir/usr/share/applications/*.desktop -appimage -bundle-non-qt-libs -extra-plugins=imageformats/libqsvg.so -qmldir="${{env.QML_DIR_NIX}}"
          # Rename AppImage to match "%AppName%-%Version%-Linux.AppImage" format
          mv Serial_Studio-${{env.VERSION}}-x86_64.AppImage ${{env.EXECUTABLE}}-${{env.VERSION}}-Linux.AppImage

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    # WhiteSource Scan
    - name: WhiteSource Unified Agent Download
      run: curl -LJO https://unified-agent.s3.amazonaws.com/wss-unified-agent.jar
    - name: WhiteSource Unified Agent Scan
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        WS_APIKEY: ${{secrets.WSAPIKEY}}
        WS_USERKEY: ${{secrets.WSUSERKEY}}
        WS_WSS_URL: https://saas-eu.whitesourcesoftware.com/agent
        WS_PRODUCTNAME: ${{github.event.repository.name}}
        WS_PROJECTNAME: ${{github.ref}}
        WS_GENERATEPROJECTDETAILSJSON: true
        WS_SCANCOMMENT: "[GitHub.tidharmeltzer] ${{github.ref}}"

      # SCA Scan
      run: |
        java -jar wss-unified-agent.jar

